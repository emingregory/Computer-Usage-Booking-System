/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package countdown;

import static countdown.CountDown.currentUser;
import static countdown.CountDown.currentDate;
import static countdown.CountDown.currentDay;
import static countdown.CountDown.currentMonth;
import static countdown.CountDown.currentYear;
import static countdown.CountDown.currentTime;
import static countdown.CountDown.results;
import static countdown.CountDown.date;
import static countdown.notice.booking;
import static countdown.notice.d;
import java.awt.event.ActionEvent;
import java.awt.event.KeyEvent;
import java.sql.SQLException;
import java.sql.ResultSet;
import javax.swing.AbstractAction;
import javax.swing.ActionMap;
import javax.swing.InputMap;
import javax.swing.JComponent;
import javax.swing.JOptionPane;
import javax.swing.KeyStroke;
import java.util.Calendar;
import java.awt.Color;
import java.io.FileNotFoundException;
import java.io.IOException;
import javax.swing.*;
import java.util.ArrayList;
/**
 *
 * @author nishanbakunts
 */
public class Book extends javax.swing.JDialog {

    static ArrayList<String> myBookings;
    static String nextYear = "";
    static String chosenMonth = "" ;
    static String chosenDay = "";
    static String chosenTime = "";
    String chosenDateToDisplay = "";
    String chosenDate = "";
    String chosenHour = ""; 
    String chosenMins = "";
    String chosenYear = "";
    int chosenSecs = 0;
    ResultSet results = null;
    ResultSet results2 =  null;
    ResultSet results3 = null;
    ResultSet results4 = null;
    public static int weeklyBooking = 0;
    int difference = 0;
    String bookedUser = "";
    String bookedUsers = "";
    String bookedDate = "";
    String bookedUser2 = "";
    String bookedDate2 = "";
    String todaysBookings = "";
    String bookedTime = "";
    String bookedTime2 = "";
    int bookedSecs = 0;
    int bookedSecs2 = 0;
    int prevYear = 0;
    Book booking;
    
    /**
     * A return status code - returned if Cancel button has been pressed
     */
    
    public static final int RET_CANCEL = 0;
    
    /**
     * A return status code - returned if OK button has been pressed
     */
    public static final int RET_OK = 1;

    /**
     * Creates new form Book
     */
    public Book(java.awt.Frame parent, boolean modal) {
        
        super(parent, modal);
        
        nextYear = Integer.toString(Integer.parseInt(CountDown.currentYear) + 1);
        
         try 
               {
                 
               // Get all the bookings by the current user for next seven days
               results =  Database.get_Statement().executeQuery("Select COUNT "
                + "(Next_Login_Date) from UserTable where (Username = '" + currentUser + "' AND Next_Login_Date >= CURRENT_DATE )");//AND " + currentSecs + "BETWEEN Time_in_seconds AND Time_in_seconds + 5340)"); // and Last_Login_Date = '" + currentDate + "')");
              
               }
          catch (SQLException e)
                {
                    System.out.println("Error " + e);
                }        
                  
           try 
                 
               {  
                 while (results.next())  
                  {
                  
                 weeklyBooking = Integer.parseInt(results.getString(1));
               
                 
                  }
                 
              results.close();
               }
           catch (SQLException e)
                {
                    System.out.println("Error - reading booked data" + e);
                } 
        
        
        
        initComponents();
         
        
        
        // Close the dialog when Esc is pressed
        String cancelName = "cancel";
        InputMap inputMap = getRootPane().getInputMap(JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT);
        inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_ESCAPE, 0), cancelName);
        ActionMap actionMap = getRootPane().getActionMap();
        actionMap.put(cancelName, new AbstractAction() {
            public void actionPerformed(ActionEvent e) {
                doClose(RET_CANCEL);
            }
        });
    }

    /**
     * @return the return status of this dialog - one of RET_OK or RET_CANCEL
     */
    public int getReturnStatus() {
        return returnStatus;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        user1 = new javax.swing.JLabel();
        okButton = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        month = new javax.swing.JComboBox();
        jLabel3 = new javax.swing.JLabel();
        time = new javax.swing.JComboBox();
        jLabel4 = new javax.swing.JLabel();
        day = new javax.swing.JComboBox();
        user = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        year = new javax.swing.JComboBox();
        bookingNo = new javax.swing.JLabel();
        user2 = new javax.swing.JLabel();
        bookings = new javax.swing.JLabel();
        ViewBookings = new javax.swing.JButton();
        ok = new javax.swing.JButton();
        allBookings = new javax.swing.JButton();

        user1.setText(CountDown.currentUser);

        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                closeDialog(evt);
            }
        });

        okButton.setText("Book Computer");
        okButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                okButtonActionPerformed(evt);
            }
        });

        jLabel1.setForeground(new java.awt.Color(0, 0, 153));
        jLabel1.setText("Select Year");

        jLabel2.setForeground(new java.awt.Color(0, 0, 153));
        jLabel2.setText("Select Month");

        month.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "01", "02", "03", "04", "05", "06", "07", "08", "09", "10", "11", "12" }));

        jLabel3.setForeground(new java.awt.Color(0, 0, 153));
        jLabel3.setText("Select Time");

        time.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "08:30", "10:00", "13:30", "15:00" }));

        jLabel4.setForeground(new java.awt.Color(0, 0, 153));
        jLabel4.setText("Select Day");

        day.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "01", "02", "03", "04", "05", "06", "07", "08", "09", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23", "24", "25", "26", "27", "28", "29", "30", "31" }));

        user.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        user.setForeground(new java.awt.Color(255, 0, 0));
        user.setText(CountDown.currentUser);

        jLabel6.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(0, 0, 204));
        jLabel6.setText("Current User:");

        jLabel7.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(255, 0, 0));
        jLabel7.setText("Please note that you will be able to book one session per day and up to five per week. ");

        year.setModel(new javax.swing.DefaultComboBoxModel(new String[] { CountDown.currentYear, nextYear }));

        bookingNo.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        bookingNo.setForeground(new java.awt.Color(0, 0, 204));
        bookingNo.setText("Number of bookings by ");

        user2.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        user2.setForeground(new java.awt.Color(0, 0, 204));
        user2.setText(CountDown.currentUser);

        bookings.setBackground(new java.awt.Color(0, 0, 0));
        bookings.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        bookings.setForeground(new java.awt.Color(255, 0, 0));
        bookings.setText(Integer.toString(weeklyBooking));

        ViewBookings.setText("View My Bookings");
        ViewBookings.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                ViewBookingsMouseClicked(evt);
            }
        });
        ViewBookings.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ViewBookingsActionPerformed(evt);
            }
        });

        ok.setText("Exit");
        ok.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                okActionPerformed(evt);
            }
        });

        allBookings.setText("View Today's Bookings");
        allBookings.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                allBookingsActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(53, 53, 53)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(okButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(allBookings)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(ViewBookings)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(ok)
                        .addGap(28, 28, 28))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(user)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(bookingNo)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(user2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(bookings)
                        .addGap(169, 169, 169))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel7)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel1)
                                    .addComponent(year, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(90, 90, 90)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel4)
                                    .addComponent(day, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(75, 75, 75)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(month, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.TRAILING))
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(82, 82, 82)
                                        .addComponent(time, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addGap(81, 81, 81)
                                        .addComponent(jLabel3)))))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(user)
                    .addComponent(bookingNo)
                    .addComponent(user2)
                    .addComponent(bookings))
                .addGap(60, 60, 60)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(day, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(month, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(year, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(time, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(31, 31, 31)
                .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 35, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(okButton)
                    .addComponent(ViewBookings)
                    .addComponent(ok)
                    .addComponent(allBookings))
                .addContainerGap())
        );

        getRootPane().setDefaultButton(okButton);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void okButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_okButtonActionPerformed
        doClose(RET_OK);
        
        int daysInMonth = getDaysInMonth(date.get(Calendar.MONTH) + 1);
        
        
        chosenYear = year.getSelectedItem().toString();
        chosenMonth = month.getSelectedItem().toString();
        chosenDay = day.getSelectedItem().toString();
        chosenTime = time.getSelectedItem().toString();
        chosenHour = chosenTime.substring(0,2);
        chosenMins = chosenTime.substring(3,5);
        chosenDate = chosenYear  + "-" + chosenMonth + "-"  + chosenDay;
        chosenDateToDisplay =  chosenDay + "/" + chosenMonth + "/" + chosenYear ;
        chosenSecs = (Integer.parseInt(chosenHour) * 60 * 60);
        chosenSecs = chosenSecs + (Integer.parseInt(chosenMins) * 60);
       
        difference = Integer.parseInt(chosenDay) - (Integer.parseInt(currentDay) - daysInMonth);
        int difference2 = difference - daysInMonth;
          
                 
                 try 
               {
                     
                
               // Get all the bookings and test whether the user's chosen date matches one in the database
                   results2 =  Database.get_Statement().executeQuery("Select UserName,  "
                + " Next_Login_Date, Next_Login_Time, Time_in_seconds from UserTable where Next_Login_Date = '" + chosenDate + "' AND Time_in_seconds = " + chosenSecs + "");
               }
          catch (SQLException e)
                {
                    System.out.println("Error - reading booked data" + e);
                }     
                 
                 try {
                 while (results2.next())
                         {
                             
                             bookedUser = results2.getString(1);
                             bookedDate = results2.getString(2);
                             bookedTime = results2.getString(3);
                             bookedSecs = Integer.parseInt(results2.getString(4));
                             
                            // System.out.println("Booked date " + results.getString(2));
                          
                          }
                 results2.close();
                 }
          catch (SQLException e)
                {
                    System.out.println("Error reading booked data 2" + e);
                }
                 
                 
                    try 
               {
                     
                
               // Get all the bookings and test whether the user's chosen date matches one in the database
                   results3 =  Database.get_Statement().executeQuery("Select UserName,  "
                + " Next_Login_Date, Next_Login_Time, Time_in_seconds from UserTable where Next_Login_Date = '" + chosenDate + "' AND UserName = '" + currentUser + "'");
               }
          catch (SQLException e)
                {
                    System.out.println("Error - reading booked data" + e);
                }     
                 
                 try {
                 while (results3.next())
                         {
                             
                             bookedUser2 = results3.getString(1);
                             bookedDate2 = results3.getString(2);
                             bookedTime2 = results3.getString(3);
                             bookedSecs2 = Integer.parseInt(results3.getString(4));
                             
                            // System.out.println("Booked date " + results.getString(2));
                          
                          }
                 results2.close();
                 }
          catch (SQLException e)
                {
                    System.out.println("Error reading booked data 2" + e);
                }
                 
                 
                  // If the user has booked the system 5 time within the next week the display an error message
                 // stating that no more bookings are allowed
                 if (weeklyBooking >= 5)
                  {
                    
                    JOptionPane.showMessageDialog(rootPane, "No more bookings allowed, as " + currentUser + " booked this system for 5 days this week." );
                    
                     this.dispose();
                     
                    
                     return;
                       
                   
                  }
                         
                    // if the user tries to book the system backwards in time the display an error message
               else if (chosenSecs < CountDown.currentSecs && !(Integer.parseInt(chosenYear) > Integer.parseInt(currentYear)) && !(Integer.parseInt(chosenMonth) > Integer.parseInt(currentMonth)) && !(Integer.parseInt(chosenDay) > Integer.parseInt(currentDay))) 
                     
                 {            
                         
                              JOptionPane.showMessageDialog(rootPane, "Please check your entry as you cannot book backwards in time. " );
                               
                              this.setVisible(false);
                              
                              chosenMonth = "";
                              chosenDay = "";
                              chosenYear = "";
                              this.doClose(RET_OK);
                              booking = new Book(new javax.swing.JFrame(), true);
            
                              booking.setTitle("Book This Computer");
                              booking.setAlwaysOnTop(true);
                              booking.setLocation(d.width/4 + 20, d.height/4);
                              booking.setVisible(true);
                              
                        
                 }      
          
                 
                
                
                 else if (bookedUser2.equals(currentUser) && bookedDate2.equals(chosenDate) )
                      {     
                         
                         JOptionPane.showMessageDialog(rootPane, "Booking not successful as " + bookedUser2 + " has already booked the system on\n                                               " 
                         + chosenDateToDisplay + " at " +  bookedTime2);
        
                         this.setVisible(false);
                         this.dispose();
                         chosenMonth = "";
                         chosenDay = "";
                         chosenYear = "";
                         booking = new Book(new javax.swing.JFrame(), true);
            
                         booking.setTitle("Book This Computer");
                         booking.setAlwaysOnTop(true);
                         booking.setLocation(d.width/4 + 20, d.height/4);
                         booking.setVisible(true);
                        
                         
                         }
                 
                 
                  // If the user tries to book the system for a particular time
                  // and the system has already been booked for that time
                  // then display an error message stating that the booking was not successful
                else if ((bookedDate.equals(chosenDate) && bookedSecs == chosenSecs) )//|| (bookedUser.equals(currentUser) && bookedDate.equals(chosenDate) ))
                      {    
                         
                    
                         //System.out.println("Booked date " + bookedDate);
                         JOptionPane.showMessageDialog(rootPane, "Booking not succesfful as " + bookedUser + " has already booked the system on\n                                               " 
                         + chosenDateToDisplay + " at " +  bookedTime);
        
                       this.setVisible(false);
                       this.dispose();
                       chosenMonth = "";
                       chosenDay = "";
                       chosenYear = "";
                       booking = new Book(new javax.swing.JFrame(), true);
            
                       booking.setTitle("Book This Computer");
                       booking.setAlwaysOnTop(true);
                       booking.setLocation(d.width/4 + 20, d.height/4);
                       booking.setVisible(true);
                         
                         }
                 
                
                
               
                 
                  
                 // If the user tries to book the system more than a month in advance or months prior to current date
                 // then display an error message stating that the booking was not successful
                 
                try
                {
                    Integer.parseInt(chosenMonth);
                    Integer.parseInt(currentMonth);
                }
                catch (NumberFormatException ne) 
                {
                    System.out.println(ne);
                    return;
                    
                }
                    
               
                 if (  Integer.parseInt(chosenMonth) > Integer.parseInt(currentMonth) + 1  )
                     
                 {      
                         
                              JOptionPane.showMessageDialog(rootPane, "Booking not sucsessful as it must be within 7 days starting from the current date." );
                        
                       this.setVisible(false);
                       this.dispose(); 
                       chosenMonth = "";
                       chosenDay = "";
                       chosenYear = "";
                       booking = new Book(new javax.swing.JFrame(), true);
            
                       booking.setTitle("Book This Computer");
                       booking.setAlwaysOnTop(true);
                       booking.setLocation(d.width/4 + 20, d.height/4);
                       booking.setVisible(true);
                         
                              
                              
                    
                              
                         }
                 
                
                 
                 // If the user tries to book the system within the next seven days and 
                 // the booking day(s) overlap to the next month then book the system
                 else if (!bookedDate.equals(chosenDate) && !(bookedSecs == chosenSecs) && Integer.parseInt(chosenMonth) > Integer.parseInt(currentMonth) && difference < 7 ) //&& (!bookedDate.equals(chosenDate) && bookedUser.equals(currentUser)) )
                        {
                         
                                      try 
                                        {
                                          //System.out.println(currentUser + " has booked to use this system " + weeklyBooking + " times");
                                           Database.get_Statement().executeUpdate("insert into UserTable (UserName, Last_Login_Date, "
                                           + "Last_Login_Time, Next_Login_Date, Next_Login_Time, Time_in_seconds) values ('" + currentUser + "', '" + currentDate + "', '" +  currentTime + "', "
                                           + "'" + chosenDate + "', '" + chosenTime  + "', " + chosenSecs
                                           + ")" );
                                        }
            
                                        catch (SQLException se)
                                           {
                                             System.out.println("Error 2" + se);
                                           } 
                         this.setVisible(false);
                       
                         notice.booking.dispose();
                         chosenMonth = "";
                         chosenDay = "";
                         chosenYear = "";
                         
                           JOptionPane.showMessageDialog(rootPane, "Booking sucsessful for: " + chosenDateToDisplay + " at: " + chosenTime + " ");
                           return;          
                 }
                     
                                      
                         
                  
                 
                 // If there are no bookings by the current user for current date and time and 
                 // User chosen time is in the future
                 
                 else if (!bookedDate.equals(chosenDate) && !(bookedSecs == chosenSecs) && chosenDate.equals(currentDate) && chosenMonth.equals(currentMonth) && !bookedDate.equals(currentDate) && !bookedTime.equals(chosenTime) && !bookedUser.equals(currentUser) && !(chosenSecs < CountDown.currentSecs))
                 
                 {
                     //System.out.println(chosenSecs + " " +  CountDown.currentSecs);
                                 
                     try 
                                        {
                                         
                                           Database.get_Statement().executeUpdate("insert into UserTable (UserName, Last_Login_Date, "
                                           + "Last_Login_Time, Next_Login_Date, Next_Login_Time, Time_in_seconds) values ('" + currentUser + "', '" + currentDate + "', '" +  currentTime + "', "
                                           + "'" + chosenDate + "', '" + chosenTime  + "', " + chosenSecs
                                           + ")" );
                                        }
            
                                        catch (SQLException se)
                                           {
                                             System.out.println("Error 2" + se);
                                       } 
                         this.setVisible(false);
                         
                         notice.booking.dispose();
                         chosenMonth = "";
                         chosenDay = "";
                         chosenYear = "";
                        
                     JOptionPane.showMessageDialog(rootPane, "Booking sucsessful for: " + chosenDateToDisplay + " at: " + chosenTime + " ");
                     return;
                                   
                 }
                 
                 // If user tries to book the system in January of the follwoing year
                 // and the chosen day is less than seven days ahead, then book the system
                  else if (!bookedDate.equals(chosenDate) && !(bookedSecs == chosenSecs) && Integer.parseInt(chosenMonth) == 01 && Integer.parseInt(chosenYear) == Integer.parseInt(nextYear) && difference <= 7)
                         
                         {
                                 
                             try 
                                        {
                                         
                                           Database.get_Statement().executeUpdate("insert into UserTable (UserName, Last_Login_Date, "
                                           + "Last_Login_Time, Next_Login_Date, Next_Login_Time, Time_in_seconds) values ('" + currentUser + "', '" + currentDate + "', '" +  currentTime + "', "
                                           + "'" + chosenDate + "', '" + chosenTime  + "', " + chosenSecs
                                           + ")" );
                                        }
            
                                        catch (SQLException se)
                                           {
                                             System.out.println("Error 2" + se);
                                      } 
                         this.setVisible(false);
                       
                         notice.booking.dispose();
                         chosenMonth = "";
                         chosenDay = "";
                         chosenYear = "";
                         
                          JOptionPane.showMessageDialog(rootPane, "Booking sucsessful for: " + chosenDateToDisplay + " at: " + chosenTime + " ");
                          return;         
                         }
                 
                              
                  
                 // If user tries to book the system in January of the follwoing year
                 // and the chosen day is more than seven days ahead, then display an error message
                 else if ( (Integer.parseInt(chosenMonth) == 01) && Integer.parseInt(chosenYear) == Integer.parseInt(nextYear) && difference > 7)
                         
                              {
                               
                               //System.out.println("You are trying to book the syetm " + difference + " days in advance!");
                               JOptionPane.showMessageDialog(rootPane, "Booking not sucsessful as it must be within 7 days starting from the current date. "
                                      );
                               
                                 this.setVisible(false);
                                 this.dispose();
                                 chosenMonth = "";
                                 chosenDay = "";
                                 chosenYear = "";
                                 booking = new Book(new javax.swing.JFrame(), true);
            
                                 booking.setTitle("Book This Computer");
                                 booking.setAlwaysOnTop(true);
                                 booking.setLocation(d.width/4 + 20, d.height/4);
                                 booking.setVisible(true);
                              }
                 
                                      
                  
                 // If the user tries to book the system month or months prior to current date and
                 // the chosen day is less than the current day, then display error message
                 else if ( Integer.parseInt(chosenMonth) < Integer.parseInt(currentMonth) && Integer.parseInt(chosenDay) < Integer.parseInt(currentDay)  && Integer.parseInt(chosenYear) == Integer.parseInt(currentYear) ) 
                 
                     {
                        
                         JOptionPane.showMessageDialog(rootPane, "Booking not sucsessful as it must be within 7 days starting from the current date." );
                         
                         this.setVisible(false);
                         this.dispose();
                         chosenMonth = "";
                         chosenDay = "";
                         chosenYear = "";
                          booking = new Book(new javax.swing.JFrame(), true);
            
                          booking.setTitle("Book This Computer");
                          booking.setAlwaysOnTop(true);
                          booking.setLocation(d.width/4 + 20, d.height/4);
                          booking.setVisible(true);   
                        }
                     
                 // If the user tries to book the system month or months prior to current date and
                 // the chosen day is more than the current day, then display error message
                  else if ( (Integer.parseInt(chosenMonth) < Integer.parseInt(currentMonth)) && (Integer.parseInt(chosenDay) > Integer.parseInt(currentDay) ) && (Integer.parseInt(chosenYear) == Integer.parseInt(currentYear)))
                 
                     {
                         
                         JOptionPane.showMessageDialog(rootPane, "Booking not sucsessful as it must be within 7 days starting from the current date." );
        
                         
                         
                         
                                 this.setVisible(false);
                                 this.dispose();
                                 chosenMonth = "";
                                 chosenDay = "";
                                 chosenYear = "";
                                 booking = new Book(new javax.swing.JFrame(), true);
            
                                 booking.setTitle("Book This Computer");
                                 booking.setAlwaysOnTop(true);
                                 booking.setLocation(d.width/4 + 20, d.height/4);
                                 booking.setVisible(true);  
                        }
                 
                  // if the user chooses less than a month in advance and more than seven days ahead
                  // the display an error indicating this
                  
                   else if ( (Integer.parseInt(chosenMonth) > Integer.parseInt(currentMonth))  && (Integer.parseInt(chosenYear) == Integer.parseInt(currentYear)) && (difference > 7))
                 
                     {
                         
                         JOptionPane.showMessageDialog(rootPane, "Booking not sucsessful as it must be within 7 days starting from the current date." );
        
                         
                                 this.setVisible(false);
                                 this.dispose();
                                 chosenMonth = "";
                                 chosenDay = "";
                                 chosenYear = "";
                                 booking = new Book(new javax.swing.JFrame(), true);
            
                                 booking.setTitle("Book This Computer");
                                 booking.setAlwaysOnTop(true);
                                 booking.setLocation(d.width/4 + 20, d.height/4);
                                 booking.setVisible(true);
                        }
                
                 
                
                 
                 
                 // If the user tries to book the system backwards within the current month
                 // the display an error message idicating that booking is not successful
                  else if (  Integer.parseInt(chosenMonth) == Integer.parseInt(currentMonth) && (Integer.parseInt(chosenDay) < Integer.parseInt(currentDay)) )
                   
                              {  
                                  JOptionPane.showMessageDialog(rootPane, "Booking not sucsessful as it must be within 7 days starting from the current date." );
        
                                  
                                 this.setVisible(false);
                                 this.dispose();
                                 chosenMonth = "";
                                 chosenDay = "";
                                 chosenYear = "";
                                 booking = new Book(new javax.swing.JFrame(), true);
            
                                 booking.setTitle("Book This Computer");
                                 booking.setAlwaysOnTop(true);
                                 booking.setLocation(d.width/4 + 20, d.height/4);
                                 booking.setVisible(true);
                                  
                              }
                  
                  // If the user chooses the current month and day and the chosen day is wihtin next seven days
                  // then book the system
                  else if ( !bookedDate.equals(chosenDate) && !(bookedSecs == chosenSecs) &&  Integer.parseInt(chosenMonth) == Integer.parseInt(currentMonth) && (Integer.parseInt(chosenDay) > Integer.parseInt(currentDay)) && difference2 < 7 )
                   
                              {
                                     try 
                                        {
                                         
                                           Database.get_Statement().executeUpdate("insert into UserTable (UserName, Last_Login_Date, "
                                           + "Last_Login_Time, Next_Login_Date, Next_Login_Time, Time_in_seconds) values ('" + currentUser + "', '" + currentDate + "', '" +  currentTime + "', "
                                           + "'" + chosenDate + "', '" + chosenTime  + "', " + chosenSecs
                                           + ")" );
                                        }
            
                                        catch (SQLException se)
                                           {
                                             System.out.println("Error 2" + se);
                                           } 
                                      JOptionPane.showMessageDialog(rootPane, "Booking sucsessful for: " + chosenDateToDisplay + " at: " + chosenTime + " ");
                            
                          
                                        
                                        chosenMonth = "" ;                       
                                        chosenDay = "";
                                        chosenTime = "";
                                        chosenDate = "";
                                        chosenHour = ""; 
                                        chosenMins = "";
                                        chosenYear = "";
                                        chosenSecs = 0;
                                        results = null;
                                        results2 =  null;
                                        results3 = null;
                                        weeklyBooking = 0;
                                        difference = 0;
                                        bookedUser = "";
                                        bookedUser2 = "";
                                        bookedUsers = "";
                                        bookedDate = "";
                                        bookedDate2 = "";
                                        todaysBookings = "";
                                        bookedTime = "";
                                        bookedTime2 = "";
                                        bookedSecs = 0;
                                        bookedSecs2 = 0;
                                        prevYear = 0; 
              
                                        this.setVisible(false);                         
                                        notice.booking.dispose();
                         
                       
                         return;
                         
                              }
                  
                  
                  
                  
                    // If the user chooses a day in current month and the choice is more than a seven days ahead
                    // then display an erros message indicating this
                    else if (  Integer.parseInt(chosenMonth) == Integer.parseInt(currentMonth) && (Integer.parseInt(chosenDay) > Integer.parseInt(currentDay)) && difference > 7 )
                   
                              {
                                  
                                  JOptionPane.showMessageDialog(rootPane, "Booking not sucsessful as it must be within 7 days starting from the current date." );
        
                                  
                                  
                                    nextYear = "";
                                    chosenMonth = "" ;                       
                                    chosenDay = "";
                                    chosenTime = "";
                                    chosenDate = "";
                                    chosenHour = ""; 
                                    chosenMins = "";
                                    chosenYear = "";
                                    chosenSecs = 0;
                                    results = null;
                                    results2 =  null;
                                    results3 = null;
                                    weeklyBooking = 0;
                                    difference = 0;
                                    bookedUser = "";
                                    bookedUser2 = "";
                                    bookedUsers = "";
                                    bookedDate = "";
                                    bookedDate2 = "";
                                    todaysBookings = "";
                                    bookedTime = "";
                                    bookedTime2 = "";
                                    bookedSecs = 0;
                                    bookedSecs2 = 0;
                                    prevYear = 0; 
                                 
                                 this.dispose();
                                 this.setVisible(false);
                                 booking = new Book(new javax.swing.JFrame(), true);
            
                                 booking.setTitle("Book This Computer");
                                 booking.setAlwaysOnTop(true);
                                 booking.setLocation(d.width/4 + 80, d.height/4);
                                 booking.setVisible(true);
                                  
                              }
                    
                    
                    
                    
                 
                    
                    // If user chooses current day and month and the chosen time is more than the current time
                    // then book the user's choice
                   
                    
                    else if ( !bookedDate.equals(chosenDate) && !(bookedSecs == chosenSecs) && Integer.parseInt(chosenMonth) == Integer.parseInt(currentMonth) && (Integer.parseInt(chosenDay) == Integer.parseInt(currentDay)) && chosenSecs > CountDown.currentSecs )
                   
                              {
                                  
                       try 
         {
            
        
        Database.get_Statement().executeUpdate("insert into UserTable (UserName, Last_Login_Date, "
                + "Last_Login_Time, Next_Login_Date, Next_Login_Time, Time_in_seconds) values ('" + currentUser + "', '" + currentDate + "', '" +  currentTime + "', "
                + "'" + chosenDate + "', '" + chosenTime  + "', " + chosenSecs
                + ")" );
        
        }
            
           catch (SQLException se)
                {
                    System.out.println("Error 2" + se);
                    
                } 
                       JOptionPane.showMessageDialog(rootPane, "Booking sucsessful for: " + chosenDateToDisplay + " at: " + chosenTime + " ");
                         
                         this.setVisible(false);
                         notice.booking.dispose();
                         return;
            
       
                  } 
                    
                    
                    
                    
                    
                   // If the user choosen month is current month and the chosen day is within the 7 day period
                    // then book the system
                    else if ( !bookedDate.equals(chosenDate) && !(bookedSecs == chosenSecs) && Integer.parseInt(chosenMonth) == Integer.parseInt(currentMonth) && (Integer.parseInt(chosenDay) > Integer.parseInt(currentDay)) && difference < 7 )
                   
                              {
                                  
                       try 
         {
              
           
        
        Database.get_Statement().executeUpdate("insert into UserTable (UserName, Last_Login_Date, "
                + "Last_Login_Time, Next_Login_Date, Next_Login_Time, Time_in_seconds) values ('" + currentUser + "', '" + currentDate + "', '" +  currentTime + "', "
                + "'" + chosenDate + "', '" + chosenTime  + "', " + chosenSecs
                + ")" );
        
        }
            
           catch (SQLException se)
                {
                    System.out.println("Error 2" + se);
                    
                } 
                         notice.booking.dispose();
                         
                        
                       JOptionPane.showMessageDialog(rootPane, "Booking sucsessful for: " + chosenDateToDisplay + " at: " + chosenTime + " ");
                       return;
                  } 
                                  
                             
                    
                    
                  
                 // If the user has not booked the system 5 times within the week then display a booking successful message
                  else if (!bookedDate.equals(chosenDate) && !(bookedSecs == chosenSecs) && weeklyBooking <= 5 && !(Integer.parseInt(chosenMonth) < Integer.parseInt(currentMonth)) && !(Integer.parseInt(chosenDay) < Integer.parseInt(currentDay)) && difference < 7)  
                  {
                       try 
         {
            
        //System.out.println(currentUser + " has booked to use this system " + weeklyBooking + " times");
        Database.get_Statement().executeUpdate("insert into UserTable (UserName, Last_Login_Date, "
                + "Last_Login_Time, Next_Login_Date, Next_Login_Time, Time_in_seconds) values ('" + currentUser + "', '" + currentDate + "', '" +  currentTime + "', "
                + "'" + chosenDate + "', '" + chosenTime  + "', " + chosenSecs
                + ")" );
        
        }
            
           catch (SQLException se)
                {
                    System.out.println("Error 2" + se);
                    
                } 
                     
                       
                    //System.out.println(currentUser + " has booked to use this system " + weeklyBooking + " times");
            JOptionPane.showMessageDialog(rootPane, "Booking sucsessful for: " + chosenDateToDisplay + " at: " + chosenTime + " ");
            
            this.setVisible(false);
            notice.booking.dispose();
            chosenMonth = "";
            chosenDay = "";
            chosenYear = "";
            return;
                         
                       
                       
       
                  } 
              
   
         
        
         
   
                 
                 
                 
    }//GEN-LAST:event_okButtonActionPerformed
    
   // getDaysInMonth(date.get(Calendar.MONTH));
     public int getDaysInMonth(int month)   
    {
        if (month == 1)
        {
            return 31;
        }
       
        
         else if (month == 2 && (CountDown.currentYear.equals(2016) || CountDown.currentYear.equals(2020) || CountDown.currentYear.equals(2024) || CountDown.currentYear.equals(2030)))
        
        {
            return 29;
        }
        
         else if (month == 2 && (!CountDown.currentYear.equals(2016) || !CountDown.currentYear.equals(2020) || !CountDown.currentYear.equals(2024)  || !CountDown.currentYear.equals(2030)))
        
        {
            return 28;
        }
        
         else if (month == 3)
        {
            return 31;
        }
        
          else if (month == 4)
        {
            return 30;
        }
        
          else if (month == 5)
        {
            return 31;
        }
        
        
          else if (month == 6)
        {
            return 30;
        }
        
          else if (month == 7)
        {
            return 31;
        }
        
         else if (month == 8)
        {
            return 31;
        }
        
        else if (month == 9)
        {
            return 30;
        }
        
         else if (month == 10)
        {
            return 31;
        }
        
        else if (month == 11)
        {
            return 30;
        }
        
        else if (month == 12)
        {
            return 31;
        }
        
        return 0;
    }
    
    
    
    /**
     * Closes the dialog
     */
    private void closeDialog(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_closeDialog
        
                                        nextYear = "";
                                        chosenMonth = "";                       
                                        chosenDay = "";
                                        chosenTime = "";
                                        chosenDate = "";
                                        chosenHour = ""; 
                                        chosenMins = "";
                                        chosenYear = "";
                                        chosenSecs = 0;
                                        results = null;
                                        results2 =  null;
                                        results3 = null;
                                        weeklyBooking = 0;
                                        difference = 0;
                                        bookedUser = "";
                                        bookedUser2 = "";
                                        bookedUsers = "";
                                        bookedDate = "";
                                        bookedDate2 = "";
                                        todaysBookings = "";
                                        bookedTime = "";
                                        bookedTime2 = "";
                                        bookedSecs = 0;
                                        bookedSecs2 = 0;
                                        prevYear = 0; 
        
        doClose(RET_CANCEL);
    }//GEN-LAST:event_closeDialog

    private void ViewBookingsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ViewBookingsActionPerformed
       
            
           
           SaveBookings.begin();
        
            
        
        // TODO add your handling code here:
    }//GEN-LAST:event_ViewBookingsActionPerformed

    private void ViewBookingsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ViewBookingsMouseClicked
       
      
    }//GEN-LAST:event_ViewBookingsMouseClicked

    private void okActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_okActionPerformed
                                                 
        
        
             try 
               {
                 
               // Get all the bookings by the current user for next seven days
               results =  Database.get_Statement().executeQuery("Select COUNT "
                + "(Next_Login_Date) from UserTable where (Username = '" + currentUser + "' AND Next_Login_Date >= CURRENT_DATE )");//AND " + currentSecs + "BETWEEN Time_in_seconds AND Time_in_seconds + 5340)"); // and Last_Login_Date = '" + currentDate + "')");
              
               }
          catch (SQLException e)
                {
                    System.out.println("Error " + e);
                }  
       
     doClose(RET_OK);
     
     results = null;
    }//GEN-LAST:event_okActionPerformed

    private void allBookingsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_allBookingsActionPerformed
       
       
           
           AllBookings.begin();
        
            
        
        // TODO add your handling code here:
    
        
        
        
    }//GEN-LAST:event_allBookingsActionPerformed
    
    private void doClose(int retStatus) {
        returnStatus = retStatus;
        setVisible(false);
        dispose();
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Book.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Book.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Book.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Book.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                Book dialog = new Book(new javax.swing.JFrame(), true);
                
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton ViewBookings;
    private javax.swing.JButton allBookings;
    private javax.swing.JLabel bookingNo;
    public static javax.swing.JLabel bookings;
    private javax.swing.JComboBox day;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JComboBox month;
    private javax.swing.JButton ok;
    private javax.swing.JButton okButton;
    private javax.swing.JComboBox time;
    private javax.swing.JLabel user;
    private javax.swing.JLabel user1;
    private javax.swing.JLabel user2;
    private javax.swing.JComboBox year;
    // End of variables declaration//GEN-END:variables
    private int returnStatus = RET_CANCEL;
}
